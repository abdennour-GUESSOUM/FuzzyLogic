configuration
{
    et := min;
    ou := max;
    decodage := centre;
    implication := larsen;
    ainsi_que := max;
}

linguistique
{
    // Direction de l'objectif - Amelioration de la granularite
    onRight := rampe_bas(-90.0, 0.0);
    slightRight := triangle(-70.0, -45.0, -20.0);  // Categorie pour virage leger
    inFront := triangle(-30.0, 0.0, 30.0);  // Reduit pour plus de precision
    slightLeft := triangle(20.0, 45.0, 70.0);  // Categorie pour virage leger
    onLeft  := rampe_haut(0.0, 90.0);
    behindLeft  := rampe_haut(45.0, 180.0);  // etendu pour couvrir plus d'arriere
    behindRight := rampe_bas(-180.0, -45.0); // etendu pour couvrir plus d'arriere

    // Distance a l'objectif - Raffinement pour mieux gerer l'approche finale
    tres_proche := rampe_bas(0.0, 50.0);     // Categorie pour l'arrivee
    proche := triangle(30.0, 100.0, 200.0);  // Ajuste
    moyenne := triangle(150.0, 300.0, 450.0); // Categorie intermediaire
    loin   := rampe_haut(400.0, 700.0);     // Ajuste

    // Distance aux obstacles - Ajustements pour mieux gerer les deplacements paralleles
    tresProche       := rampe_bas(0.0, 100.0);            // Pour detection immediate
    assezProche      := triangle(80.0, 150.0, 220.0);     // Reduit pour etre plus sensible
    distance_moyenne := triangle(180.0, 250.0, 320.0);    // Ajuste pour le suivi de mur
    distance_securite := triangle(220.0, 280.0, 340.0);   // Nouvelle zone pour navigation parallele
    assezLoin        := triangle(300.0, 400.0, 500.0);    // Ajuste
    tresLoin         := rampe_haut(450.0, 700.0);         // Ajuste

    // Rotations plus prononcees - Augmentation de l'amplitude pour sortir des impasses
    turnSharpRight := triangle(-300.0, -200.0, -100.0);
    turnVerySharpRight := triangle(-400.0, -350.0, -250.0); // Nouvelle categorie pour virage tres serre
    turnVerySharpLeft := triangle(250.0, 350.0, 400.0);     // Nouvelle categorie pour virage tres serre
    turnSharpLeft  := triangle(100.0, 200.0, 300.0); 

    // Vitesses angulaires - Raffinement pour des mouvements plus precis
    turnRight  := triangle(-200.0, -100.0, 0.0);
    turnSlightRight := triangle(-120.0, -60.0, 0.0);  // Nouvelle categorie pour virage leger
    straightOn := triangle(-50.0, 0.0, 50.0);         // Reduit pour plus de precision
    turnSlightLeft := triangle(0.0, 60.0, 120.0);     // Nouvelle categorie pour virage leger
    turnLeft   := triangle(0.0, 100.0, 200.0);
    
    // Vitesses lineaires - Ajout de vitesses intermediaires
    Stop              := triangle(-50.0, 0.0, 50.0);
    AllerTresLentement := triangle(0.0, 50.0, 100.0);
    AllerLentement    := triangle(50.0, 100.0, 150.0);
    AllerMoyennement  := triangle(100.0, 150.0, 200.0);  // Nouvelle categorie intermediaire
    AllerVite         := triangle(150.0, 200.0, 300.0);  // Ajuste pour une meilleure progression

    // Vitesse angulaire presque nulle
    presque_zero := triangle(-10.0, 0.0, 10.0);
    
    // Capteurs de blocage - Pour detecter l'immobilite ou les oscillations
    bloque := rampe_bas(0.0, 10.0);          // Vitesse lineaire faible indiquant un blocage
    oscillant := triangle(-20.0, 0.0, 20.0);  // Vitesse angulaire oscillante
}

regles
{
    //--------------------------------------------------
    // ReGLES POUR LA VITESSE LINeAIRE
    //--------------------------------------------------
    
    // Regles d'arret - priorite maximale
    si ObstFront est tresProche alors Slin est Stop;
    
    // Regles de mouvement lent
    si ObstFront est assezProche alors Slin est AllerTresLentement;
    
    // Regles de vitesse moyenne
    si ObstFront est distance_moyenne alors Slin est AllerLentement;
    si ObstFront est assezLoin alors Slin est AllerMoyennement;
    
    // Regles de vitesse elevee
    si ObstFront est tresLoin alors Slin est AllerVite;
    
    // Ajout de regles pour la rotation sur place quand le goal est a l'oppose avec obstacles proches
    si DirecGoal est behindLeft et ObstLeft est assezProche alors Slin est Stop;
    si DirecGoal est behindLeft et ObstFront est assezProche alors Slin est Stop;
    si DirecGoal est behindRight et ObstRight est assezProche alors Slin est Stop;
    si DirecGoal est behindRight et ObstFront est assezProche alors Slin est Stop;
    
    // Regle speciale pour le cas ou l'objectif est completement derriere
    si DirecGoal est behindLeft ou DirecGoal est behindRight et DirecGoal est pas inFront alors Slin est Stop;
    
    // Regles speciales pour l'approche finale
    si DistGoal est tres_proche alors Slin est AllerTresLentement;
    
    // Regles speciales pour l'approche finale
    si DistGoal est tres_proche alors Slin est AllerTresLentement;
    
    // Regles de suivi de mur - ajustement de vitesse
    si ObstLeft est distance_securite et ObstFront est assezLoin alors Slin est AllerLentement;
    si ObstRight est distance_securite et ObstFront est assezLoin alors Slin est AllerLentement;
    
    // Regle de sortie de blocage - acceleration en cas d'immobilite
    si InSlin est bloque et ObstFront est assezLoin alors Slin est AllerMoyennement;
    
    //--------------------------------------------------
    // ReGLES POUR LA VITESSE ANGULAIRE
    //--------------------------------------------------
    
    // 1. Navigation de base vers l'objectif - Plus granulaire
    si DirecGoal est inFront alors Sang est straightOn;
    si DirecGoal est slightLeft alors Sang est turnSlightLeft;
    si DirecGoal est slightRight alors Sang est turnSlightRight;
    si DirecGoal est onLeft alors Sang est turnLeft;
    si DirecGoal est onRight alors Sang est turnRight;
    // Direction a l'oppose (behind)
    si DirecGoal est behindLeft alors Sang est turnSharpLeft;
    si DirecGoal est behindRight alors Sang est turnSharpRight;
    si DirecGoal est behindLeft et ObstLeft est tresProche alors Sang est turnSharpRight;
    si DirecGoal est behindRight et ObstRight est tresProche alors Sang est turnSharpLeft;
    
    // 2. evitement d'obstacles basique
    si ObstLeft est tresProche alors Sang est turnRight;
    si ObstRight est tresProche alors Sang est turnLeft;
    
    // 3. Anticipation des obstacles avec variations d'intensite
    si ObstFront est assezProche et DirecGoal est slightRight alors Sang est turnRight;
    si ObstFront est assezProche et DirecGoal est slightLeft alors Sang est turnLeft;
    si ObstFront est assezProche et DirecGoal est onRight alors Sang est turnSharpRight;
    si ObstFront est assezProche et DirecGoal est onLeft alors Sang est turnSharpLeft;
    
    // 4. Navigation parallele aux obstacles - Regles ameliorees pour le suivi de mur
    // Maintien d'une distance de securite constante avec le mur gauche
    si ObstLeft est tresProche alors Sang est turnSharpRight;
    si ObstLeft est assezProche alors Sang est turnRight;
    si ObstLeft est distance_securite et DirecGoal est onLeft alors Sang est straightOn;
    si ObstLeft est distance_securite et ObstFront est assezLoin alors Sang est turnSlightLeft;
    si ObstLeft est distance_securite et ObstFront est assezProche alors Sang est turnRight;
    
    // Maintien d'une distance de securite constante avec le mur droit
    si ObstRight est tresProche alors Sang est turnSharpLeft;
    si ObstRight est assezProche alors Sang est turnLeft;
    si ObstRight est distance_securite et DirecGoal est onRight alors Sang est straightOn;
    si ObstRight est distance_securite et ObstFront est assezLoin alors Sang est turnSlightRight;
    si ObstRight est distance_securite et ObstFront est assezProche alors Sang est turnLeft;
    
    // 5. evitement d'obstacles avec rotations prononcees
    si ObstFront est tresProche et DirecGoal est onLeft alors Sang est turnSharpLeft;
    si ObstFront est tresProche et DirecGoal est onRight alors Sang est turnSharpRight;
    
    // 6. Contournement intelligent lorsque l'objectif est en face
    si DirecGoal est inFront et ObstFront est tresProche et ObstLeft est assezLoin alors Sang est turnSharpLeft;
    si DirecGoal est inFront et ObstFront est tresProche et ObstRight est assezLoin alors Sang est turnSharpRight;
    
    // 7. Gestion des cas particuliers de blocage - Virages plus extremes pour sortir
    si ObstFront est tresProche et ObstLeft est tresProche et ObstRight est tresProche alors Sang est turnVerySharpRight;
    si InSlin est bloque et InSang est oscillant alors Sang est turnVerySharpLeft; // Sortie d'oscillation
    
    // 8. Gestion des situations de coin
    si ObstFront est tresProche et ObstLeft est tresProche et DirecGoal est onLeft alors Sang est turnVerySharpRight;
    si ObstFront est tresProche et ObstRight est tresProche et DirecGoal est onRight alors Sang est turnVerySharpLeft;
    
    // 9. Reactions d'urgence aux collisions imminentes
    si ObstFront est tresProche et ObstLeft est tresProche alors Sang est turnSharpRight;
    si ObstFront est tresProche et ObstRight est tresProche alors Sang est turnSharpLeft;
    
    // 10. Priorite a l'approche de l'objectif quand il est proche et accessible
    si DistGoal est tres_proche et DirecGoal est inFront et ObstFront est assezLoin alors Sang est straightOn;
    
    // 11. Sortie de blocage en position complexe
    si InSlin est bloque et ObstFront est tresProche et ObstLeft est tresProche et ObstRight est tresProche alors Sang est turnVerySharpLeft;
    si InSlin est bloque et ObstFront est tresProche et ObstBack est assezLoin alors Sang est turnVerySharpRight;
    
    // 12. Ajustements fins pour le suivi de mur sur longue distance
    si ObstLeft est distance_moyenne et DirecGoal est onLeft et ObstFront est assezLoin alors Sang est turnSlightLeft;
    si ObstRight est distance_moyenne et DirecGoal est onRight et ObstFront est assezLoin alors Sang est turnSlightRight;
    
    // 13. Corrections preventives lors du suivi de mur pour eviter les fr√¥lements
    si ObstLeft est distance_securite et InSang est turnSlightLeft et ObstFront est assezLoin alors Sang est straightOn;
    si ObstRight est distance_securite et InSang est turnSlightRight et ObstFront est assezLoin alors Sang est straightOn;
}